project(pire)

INCLUDE (CheckIncludeFiles)
INCLUDE (CheckFunctionExists)
INCLUDE (CheckTypeSize)
INCLUDE (CheckCXXSourceCompiles)
INCLUDE (TestCXXAcceptsFlag)


FUNCTION (CHECK_CXX_FILE_COMPILES FILEPATH VAR)
    FILE(READ ${FILEPATH} FILECONTENT)
    CHECK_CXX_SOURCE_COMPILES("${FILECONTENT}" ${VAR})
ENDFUNCTION (CHECK_CXX_FILE_COMPILES)

CHECK_INCLUDE_FILES (malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILES(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILES(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILES(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILES(stdbool.h HAVE_STDBOOL_H)
CHECK_INCLUDE_FILES(cstdint HAVE_CSTDINT_H)
CHECK_INCLUDE_FILES(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILES(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILES(dlfcn.h HAVE_DLFCN_H)
CHECK_INCLUDE_FILES(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILES(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)


CHECK_FUNCTION_EXISTS(malloc HAVE_MALLOC)
CHECK_FUNCTION_EXISTS(memset HAVE_MEMSET)
CHECK_FUNCTION_EXISTS(strchr HAVE_STRCHR)


CHECK_CXX_ACCEPTS_FLAG("-std=c++11" HAVE_CXX11)
set(CMAKE_REQUIRED_FLAGS "-std=c++11")
CHECK_CXX_FILE_COMPILES(${CMAKE_CURRENT_SOURCE_DIR}/cmake/test_alignas.cpp HAVE_ALIGNAS)
CHECK_CXX_FILE_COMPILES(${CMAKE_CURRENT_SOURCE_DIR}/cmake/test_aligned.cpp HAVE_ATTR_ALIGNED)
CHECK_CXX_FILE_COMPILES(${CMAKE_CURRENT_SOURCE_DIR}/cmake/test_lambdas.cpp HAVE_LAMBDAS)
CHECK_CXX_FILE_COMPILES(${CMAKE_CURRENT_SOURCE_DIR}/cmake/test_scoped_expr.cpp HAVE_SCOPED_EXPR)

if (${HAVE_CSTDINT_H})
    SET(CMAKE_EXTRA_INCLUDE_FILES cstdint)
elseif (${HAVE_STDINT_H})
    SET(CMAKE_EXTRA_INCLUDE_FILES stdint.h)
elseif (${HAVE_SYS_TYPES_H})
    SET(CMAKE_EXTRA_INCLUDE_FILES sys/types.h)
endif ()

CHECK_TYPE_SIZE("size_t" ALIGNOF_SIZE_T)
CHECK_TYPE_SIZE(uint64_t ALIGNOF_UINT64_T)
CHECK_TYPE_SIZE(ptrdiff_t HAVE_PTRDIFF_T)
CHECK_TYPE_SIZE(_Bool HAVE__BOOL)
SET(CMAKE_EXTRA_INCLUDE_FILES )

CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/pire/config.h)


FOREACH(KEYWORD "inline" "__inline__" "__inline")
   IF(NOT DEFINED C_INLINE)
     TRY_COMPILE(C_HAS_${KEYWORD} "${CMAKE_CURRENT_BINARY_DIR}"
       "${CMAKE_CURRENT_SOURCE_DIR}/cmake/test_inline.c"
       COMPILE_DEFINITIONS "-Dinline=${KEYWORD}")
     IF(C_HAS_${KEYWORD})
       SET(C_INLINE TRUE)
       ADD_DEFINITIONS("-Dinline=${KEYWORD}")
     ENDIF(C_HAS_${KEYWORD})
   ENDIF(NOT DEFINED C_INLINE)
ENDFOREACH(KEYWORD)
IF(NOT DEFINED C_INLINE)
   ADD_DEFINITIONS("-Dinline=")
ENDIF(NOT DEFINED C_INLINE)

if (${enable_valgrind_safe})
    ADD_DEFINITIONS("-DENABLE_VALGRIND_SAFE")
endif ()

add_subdirectory(pire)
